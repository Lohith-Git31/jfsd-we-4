/* Project Overview: Patient Medicine and Appointment System App */

// 1. Create a new Spring Boot Project
// Step: Use Spring Initializr or IDE to create a new Spring Boot project.
// Include dependencies: Spring Web, Spring Data JPA, MySQL Driver, Thymeleaf, Spring Security, Lombok, Spring Boot DevTools.

---

/* Backend Implementation */

// 2. Implement RESTful APIs in Spring Boot
// Define controllers for handling patient information, appointment scheduling, and medication management.

// Sample PatientController.java
@RestController
@RequestMapping("/api/patients")
public class PatientController {
    
    @Autowired
    private PatientService patientService;

    @PostMapping("/register")
    public ResponseEntity<Patient> registerPatient(@RequestBody @Valid PatientDTO patientDTO) {
        Patient patient = patientService.registerPatient(patientDTO);
        return ResponseEntity.status(HttpStatus.CREATED).body(patient);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Patient> getPatient(@PathVariable Long id) {
        return ResponseEntity.ok(patientService.getPatientById(id));
    }
}

// Other Controllers: AppointmentController, MedicationController

---

/* Frontend Implementation */

// 3. Set up the Frontend with Thymeleaf
// Create responsive HTML templates for patient registration, appointment booking, and medication management.

// Sample patient-registration.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Registration</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container mt-5">
    <h1>Patient Registration</h1>
    <form id="registrationForm" method="post" action="/api/patients/register">
        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <input type="text" class="form-control" id="name" name="name" required>
        </div>
        <div class="mb-3">
            <label for="contact" class="form-label">Contact</label>
            <input type="text" class="form-control" id="contact" name="contact" required>
        </div>
        <div class="mb-3">
            <label for="history" class="form-label">Medical History</label>
            <textarea class="form-control" id="history" name="history"></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Register</button>
    </form>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

---

/* User Authentication */

// 4. Implement User Registration and Authentication
// Sample Spring Security Configuration
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable()
            .authorizeRequests()
            .antMatchers("/api/patients/register", "/login", "/css/**", "/js/**").permitAll()
            .anyRequest().authenticated()
            .and()
            .formLogin()
            .loginPage("/login")
            .permitAll();
    }
}

---

/* Database and Entities */

// 5. Define Data Models and Entities
@Entity
public class Patient {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String contact;
    private String medicalHistory;

    // Getters and Setters
}

@Entity
public class Appointment {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private LocalDateTime date;
    private String doctor;

    @ManyToOne
    private Patient patient;

    // Getters and Setters
}

// Medication Entity follows similar structure

---

/* Testing */

// 6. Write Unit Tests
@SpringBootTest
@RunWith(SpringRunner.class)
public class PatientControllerTests {

    @Autowired
    private MockMvc mockMvc;

    @Test
    public void testRegisterPatient() throws Exception {
        mockMvc.perform(post("/api/patients/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"name\":\"John Doe\", \"contact\":\"1234567890\"}"))
                .andExpect(status().isCreated());
    }
}

---

/* Documentation */

// 7. Document the API Endpoints
/*
    API Endpoints:
    - POST /api/patients/register: Registers a new patient
    - GET /api/patients/{id}: Fetch patient details

    Request/Response Formats:
    POST /api/patients/register
    Request: {"name": "John", "contact": "12345", "medicalHistory": "Asthma"}
    Response: {"id": 1, "name": "John", "contact": "12345", "medicalHistory": "Asthma"}
*/
